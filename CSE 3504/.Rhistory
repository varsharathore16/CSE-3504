mean_P = 200*mean_x + 350*mean_y
var_P = 200^2*variance_x + 350^2*variance_y
mean_P
var_P
xfx
integrate(xfx, 0, 1)
yfx <- xfx^2
yfx <- function(x)((6*x*(1-x))^2)
integrate(yfx, 0, 1)
yfx <- function(x)(x * (6*x*(1-x))^2)
integrate(yfx, 0, 1)
var <- integrate(yfx, 0, 1) - integrate(xfx, 0, 1)
var <- 0.6 - 0.5
var
var <- 0.6 - (0.5)^2
var
p_values <- seq(0.01, 0.08, by = 0.01)
d_values <- c(0, 1, 2, 3)
s <- 120
n <- 2000
binomial_prob <- function(p, d, s, n) {
p_accept <- sum(dbinom(d:(s-1), size = s, prob = p))
return(1 - p_accept)
}
par(mfrow = c(1, 4), mar = c(5, 4, 2, 2))
for (d in d_values) {
oc_values <- sapply(p_values, function(p) binomial_prob(p, d, s, n))
plot(p_values, oc_values, type = "l", col = "blue", xlab = "Proportion of Defectives (p)",
ylab = "Probability of Acceptance", main = paste("d =", d))
}
p_values <- seq(0.01, 0.08, by = 0.01)
d_values <- c(0, 1, 2, 3)
s <- 120
n <- 2000
binomial_prob <- function(p, d, s, n) {
p_accept <- sum(dbinom(d:(s-1), size=s, prob=p))
return(1 - p_accept)
}
par(mfrow = c(1, 4), mar = c(5, 4, 2, 2))
for (d in d_values) {
oc_values <- sapply(p_values, function(p) binomial_prob(p, d, s, n))
plot(p_values, oc_values, type = "l", col = "blue", xlab = "Proportion of Defectives (p)", ylab = "Probability of Acceptance", main = paste("d =", d))
}
part b:
part b
s_values <- c(100, 120, 150, 200)
d <- 2
p_values <- seq(0.01, 0.08, by = 0.01)
d_values <- c(0, 1, 2, 3)
s <- 120
n <- 2000
binomial_prob <- function(p, d, s, n) {
p_accept <- sum(dbinom(d:(s-1), size=s, prob=p))
return(1 - p_accept)
}
par(mfrow = c(1, 4)
for (d in d_values) {
oc_values <- sapply(p_values, function(p) binomial_prob(p, d, s, n))
plot(p_values, oc_values, type = "l", col = "blue", xlab = "Proportion of Defectives (p)", ylab = "Probability of Acceptance", main = paste("d =", d))
}
for (d in d_values) {
oc_values <- sapply(p_values, function(p) binomial_prob(p, d, s, n))
plot(p_values, oc_values, type = "l", col = "blue", xlab = "Proportion of Defectives (p)",
ylab = "Probability of Acceptance", main = paste("d =", d))
}
par(mfrow = c(1, 4), mar = c(5, 4, 2, 2))
for (d in d_values) {
oc_values <- sapply(p_values, function(p) binomial_prob(p, d, s, n))
plot(p_values, oc_values, type = "l", col = "blue", xlab = "Proportion of Defectives (p)",
ylab = "Probability of Acceptance", main = paste("d =", d))
}
s_values <- c(100, 120, 150, 200)
d <- 2
par(mfrow = c(1, 4), mar = c(5, 4, 2, 2))
for (s in s_values) {
oc_values <- sapply(p_values, function(p) binomial_prob(p, d, s, n))
plot(p_values, oc_values, type = "l", col = "blue", xlab = "Proportion of Defectives (p)",
ylab = "Probability of Acceptance", main = paste("s =", s))
}
for (s in s_values) {
oc_values <- sapply(p_values, function(p) binomial_prob(p, d, s, n))
plot(p_values, oc_values, type = "l", col = "blue", xlab = "Proportion of Defectives (p)",
ylab = "Probability of Acceptance", main = paste("s =", s))
}
s_values <- c(100, 120, 150, 200)
d <- 2
s_values <- c(100, 120, 150, 200)
d <- 2
par(mfrow = c(1, 4), mar = c(5, 4, 2, 2))
for (s in s_values) {
oc_values <- sapply(p_values, function(p) binomial_prob(p, d, s, n))
plot(p_values, oc_values, type = "l", col = "blue", xlab = "Proportion of Defectives (p)",
ylab = "Probability of Acceptance", main = paste("s =", s))
}
p_values <- seq(0.01, 0.08, by = 0.01)
d_values <- c(0, 1, 2, 3)
s <- 120
n <- 2000
binomial_prob <- function(p, d, s, n) {
p_accept <- sum(dbinom(d:(s-1), size = s, prob = p))
return(1 - p_accept)
}
par(mfrow = c(1, 4), mar = c(5, 4, 2, 2))
for (d in d_values) {
oc_values <- sapply(p_values, function(p) binomial_prob(p, d, s, n))
plot(p_values, oc_values, type = "l", col = "blue", xlab = "Proportion of Defectives (p)",
ylab = "Probability of Acceptance", main = paste("d =", d))
}
library(markovchain)
library(markovchain)
install.packages("markovchain")
DTMC_P <- matrix(c(0.6, 0.2, 0.2, 0.3, 0.4, 0.3, 0, 0.3, 0.7), nrow=3, byrow=TRUE)
DTMC_P
dtmcP<-new("markovchain",transitionMatrix=DTMC_P, states=c("1","2","3"),name="HW5.Question2")
library(markovchain)
dtmcP<-new("markovchain",transitionMatrix=DTMC_P, states=c("1","2","3"),name="HW5.Question2")
DTMC_P <- matrix(c(0.6, 0.2, 0.2, 0.3, 0.4, 0.3, 0, 0.3, 0.7), nrow=3, byrow=TRUE)
DTMC_P
dtmcP<-new("markovchain",transitionMatrix=DTMC_P, states=c("1","2","3"),name="HW5.Question2")
dtmcP
plot(dtmcP)
plot(dtmcP)
plot(dtmcP)
plot(dtmcP)
plot(dtmcP)
plot(dtmcP)
plot(dtmcP)
dtmcP[2,3]
dtmcP[1,2]
pi<-steadyStates(dtmcP)
pi
3/13
4/13
6/13
dtmcP[1,2]*initialState[1]
dtmcP[1,2]*pi[1]
calculate_rejection_probability <- function(s, d, AQL){
p_reject <- pbinom(d, size=s, prob=AQL)
return(1 - p_reject)
}
calculate_rejection_probability <- function(s, d, AQL){
p_reject <- pbinom(d, size=s, prob=AQL)
return(1 - p_reject)
}
calculate_rejection_probability <- function(s, d, AQL){
p_reject <- pbinom(d, size=s, prob=AQL)
return(1 - p_reject)
}
calculate_acceptance_probability <- function(s, d, LQL){
p_accept <- pbinom(d, size=s, prob=LQL)
return(p_accept)
}
AQL <- 0.02 # acceptable quality level is 2%
LQL <- 0.07 # limiting quality level is 7% (defective)
s_values <- c(60, 65, 70, 75)
d_values <- 0:3
producer_risk_table <- matrix(0, nrow=length(s_values), ncol=length(d_values)) # empty table
consumer_risk_table <- matrix(0, nrow=length(s_values), ncol=length(d_values))
for (i in 1:length(s_values)) {
for (j in 1:length(d_values)) {
producer_risk_table[i, j] <- calculate_rejection_probability(s_values[i], d_values[j], AQL)
consumer_risk_table[i, j] <- calculate_acceptance_probability(s_values[i], d_values[j], LQL)
}
}
producer_risk_table
consumer_risk_table
s <- 120
d <- 3 # defining of parametesr
p_values <- seq(0, 1, length.out=1000) # range of defect proportions
P_accept <- function(p, s, d) {
sum(dhyper(0:d, s*p, s-s*p, s))
}
# above is a function to compute probability of accepting a lot with proportion p defectives
# Function to compute expected number of defectives in accepted lots
c_p <- function(p, s, d) {
sum(0:d*dhyper(0:d, s*p, s-s*p, s))
}
# Compute AOQ for each proportion p
AOQ <- sapply(p_values, function(p) {
p * (1 - P_accept(p, s, d)) + P_accept(p, s, d) * c_p(p, s, d) / s
})
warnings()
# Plot
plot(p_values, AOQ, type="l", xlab="Proportion of Defectives", ylab="Average Outgoing Quality (AOQ)", main="AOQ Curve")
abline(h=max(AOQ), col="red", lty=2)  # AOQL line
# Find AOQL
AOQL <- max(AOQ)
print(AOQL)
c_p <- function(p, s, d) {
sum(0:d * dhyper(0:d, s * p, s - s * p, s))
}
AOQ <- sapply(p_values, function(p) {
p * (1 - P_accept(p, s, d)) + P_accept(p, s, d) * c_p(p, s, d) / s
})
# Function to calculate AOQ
AOQ <- function(p, d) {
p * pbinom(qbinom(0.95, n, p) - d, N, p) / (1 - pbinom(qbinom(0.95, n, p) - d, N, p))
}
# Values of p
p_values <- seq(0.01, 0.08, by = 0.01)
# Calculate AOQ for d = 3 and s = 120
AOQ_values <- sapply(p_values, function(p) AOQ(p, 3))
# Sample size and batch size
n <- 120
N <- 2000
# Values of d
d_values <- c(0, 1, 2, 3)
# Values of p
p_values <- seq(0.01, 0.08, by = 0.01)
# Function to calculate OC curve
OC_curve <- function(p, d) {
1 - pbinom(qbinom(0.95, n, p) - d, N, p)
}
# Plot OC curves
par(mfrow = c(1, 4))
for (d in d_values) {
plot(p_values, OC_curve(p_values, d), type = 'l', col = rainbow(length(d_values))[d + 1],
main = paste("OC Curve for d =", d), xlab = "Proportion of Defectives (p)", ylab = "Probability of Acceptance")
}
# Function to calculate AOQ
AOQ <- function(p, d) {
p * pbinom(qbinom(0.95, n, p) - d, N, p) / (1 - pbinom(qbinom(0.95, n, p) - d, N, p))
}
# Values of p
p_values <- seq(0.01, 0.08, by = 0.01)
# Calculate AOQ for d = 3 and s = 120
AOQ_values <- sapply(p_values, function(p) AOQ(p, 3))
# Plot AOQ curve
plot(p_values, AOQ_values, type = 'l', col = 'blue',
main = "Average Outgoing Quality (AOQ)", xlab = "Proportion of Defectives (p)", ylab = "AOQ")
max(AOQ)
AOQL <- max(AOQ)
print(AOQL)
s <- 120  # sample size
d <- 3    # acceptance number
# Define range of defect proportions
p_values <- seq(0, 1, length.out = 1000)
# Function to compute probability of accepting a lot with proportion p defectives
P_accept <- function(p, s, d) {
sum(dhyper(0:d, s * p, s - s * p, s))
}
# Function to compute expected number of defectives in accepted lots
c_p <- function(p, s, d) {
sum(0:d * dhyper(0:d, s * p, s - s * p, s))
}
# Compute AOQ for each proportion p
AOQ <- sapply(p_values, function(p) {
p * (1 - P_accept(p, s, d)) + P_accept(p, s, d) * c_p(p, s, d) / s
})
# Plot
plot(p_values, AOQ, type="l", xlab="Proportion of Defectives", ylab="Average Outgoing Quality (AOQ)", main="AOQ Curve")
abline(h=max(AOQ), col="red", lty=2)  # AOQL line
# Find AOQL
AOQL <- max(AOQ)
print(AOQL)
# Sample size and batch size
n <- 120
N <- 2000
# Values of d
d_values <- c(0, 1, 2, 3)
# Values of p
p_values <- seq(0.01, 0.08, by = 0.01)
# Function to calculate OC curve
OC_curve <- function(p, d) {
1 - pbinom(qbinom(0.95, n, p) - d, N, p)
}
# Plot OC curves
par(mfrow = c(1, 4))
for (d in d_values) {
plot(p_values, OC_curve(p_values, d), type = 'l', col = rainbow(length(d_values))[d + 1],
main = paste("OC Curve for d =", d), xlab = "Proportion of Defectives (p)", ylab = "Probability of Acceptance")
}
# Sample sizes
s_values <- c(100, 120, 150, 200)
d <- 2
# Plot OC curves for different sample sizes
par(mfrow = c(1, 4))
for (s in s_values) {
plot(p_values, OC_curve(p_values, d), type = 'l', col = rainbow(length(s_values))[s_values == s],
main = paste("OC Curve for s =", s), xlab = "Proportion of Defectives (p)", ylab = "Probability of Acceptance")
}
# Function to calculate rejection probability for the producer
producer_rejection_probability <- function(s, d) {
p_reject <- pbinom(d, s, 0.02)  # AQL of 2%
consumer_risk <- 1 - pbinom(qbinom(0.95, n, 0.07) - d, N, 0.07)  # Consumer's risk at LQL of 7%
return(list(s = s, d = d, producer_risk = p_reject, consumer_risk = consumer_risk))
}
# Calculate for different s and d
s_values <- c(60, 65, 70, 75)
d_values <- c(0, 1, 2, 3)
producer_risk_table <- matrix(0, nrow = length(s_values), ncol = length(d_values))
# Part C
s <- 120
d <- 3
p_values <- seq(0.01, 0.08, by = 0.01)
AOQ_values <- numeric(length(p_values))
for (i in 1:length(p_values)) {
p_accept <- 1 - pbinom(d, s, p_values[i])
p_reject <- 1 - p_accept
AOQ_values[i] <- p_values[i] * p_accept + (1 - p_values[i]) * p_reject
}
# Plot the AOQ
plot(p_values, AOQ_values, type = "l", col = "blue", ylim = c(0, 1),
main = "Average Outgoing Quality (AOQ)",
xlab = "Proportion of Defectives (p)",
ylab = "AOQ")
# Add a red dashed line for the AOQ limit
abline(h = 0.95, col = "red", lty = 2)
max(AOQ_values)
max(AOQ)
> p_values <- seq(0.01, 0.08, by = 0.01)
p_values <- seq(0, 0.08, by = 0.01)
plot(p_values, AOQ_values, type = "l", col = "blue", ylim = c(0, 1),
+      main = "Average Outgoing Quality (AOQ)",
# Part C
s <- 120
d <- 3
p_values <- seq(0.01, 0.08, by = 0.01)
AOQ_values <- numeric(length(p_values))
for (i in 1:length(p_values)) {
p_accept <- 1 - pbinom(d, s, p_values[i])
p_reject <- 1 - p_accept
AOQ_values[i] <- p_values[i] * p_accept + (1 - p_values[i]) * p_reject
}
# Plot the AOQ
plot(p_values, AOQ_values, type = "l", col = "blue", ylim = c(0, 1),
main = "Average Outgoing Quality (AOQ)",
xlab = "Proportion of Defectives (p)",
ylab = "AOQ")
# Add a red dashed line for the AOQ limit
abline(h = 0.95, col = "red", lty = 2)
# Part C
s <- 120
d <- 3
p_values <- seq(0, 0.08, by = 0.01)
AOQ_values <- numeric(length(p_values))
for (i in 1:length(p_values)) {
p_accept <- 1 - pbinom(d, s, p_values[i])
p_reject <- 1 - p_accept
AOQ_values[i] <- p_values[i] * p_accept + (1 - p_values[i]) * p_reject
}
# Plot the AOQ
plot(p_values, AOQ_values, type = "l", col = "blue", ylim = c(0, 1),
main = "Average Outgoing Quality (AOQ)",
xlab = "Proportion of Defectives (p)",
ylab = "AOQ")
# Add a red dashed line for the AOQ limit
abline(h = 0.95, col = "red", lty = 2)
# Part C
s <- 120
d <- 3
p_values <- seq(0, 1, by = 0.01)
AOQ_values <- numeric(length(p_values))
for (i in 1:length(p_values)) {
p_accept <- 1 - pbinom(d, s, p_values[i])
p_reject <- 1 - p_accept
AOQ_values[i] <- p_values[i] * p_accept + (1 - p_values[i]) * p_reject
}
# Plot the AOQ
plot(p_values, AOQ_values, type = "l", col = "blue", ylim = c(0, 1),
main = "Average Outgoing Quality (AOQ)",
xlab = "Proportion of Defectives (p)",
ylab = "AOQ")
# Add a red dashed line for the AOQ limit
abline(h = 0.95, col = "red", lty = 2)
# Part C
s <- 120
d <- 3
p_values <- seq(0, 1, by = 0.01)
AOQ_values <- numeric(length(p_values))
for (i in 1:length(p_values)) {
p_accept <- 1 - pbinom(d, s, p_values[i])
p_reject <- 1 - p_accept
AOQ_values[i] <- p_values[i] * p_accept + (1 - p_values[i]) * p_reject
}
# Plot the AOQ
plot(p_values, AOQ_values, type = "l", col = "blue", ylim = c(0, 1),
main = "Average Outgoing Quality (AOQ)",
xlab = "Proportion of Defectives (p)",
ylab = "AOQ")
max(AOQ_values)
# Part C
s <- 120
d <- 3
p_values <- seq(0, .08, by = 0.01)
AOQ_values <- numeric(length(p_values))
for (i in 1:length(p_values)) {
p_accept <- 1 - pbinom(d, s, p_values[i])
p_reject <- 1 - p_accept
AOQ_values[i] <- p_values[i] * p_accept + (1 - p_values[i]) * p_reject
}
# Plot the AOQ
plot(p_values, AOQ_values, type = "l", col = "blue", ylim = c(0, 1),
main = "Average Outgoing Quality (AOQ)",
xlab = "Proportion of Defectives (p)",
ylab = "AOQ")
AOQ <- phyper(d, 2000*p, 2000*(i-p), s)
AOQ <- p*A(N-s)/N
d <- 3
s <- 120
N <- 2000
p <- seq(0, 1, by=0.01)
for(i in 1:length(p)){
p_accept <- 1-pbinom(d, s, p[i])
p_reject <- 1 - p_accept
A <- phyper(d, 2000*p, 2000*(p[i]-p), s)
AOQ <- p*A(N-s)/N
}
d <- 3
s <- 120
N <- 2000
p <- seq(0, 1, by=0.01)
for(i in 1:length(p)){
p_accept <- 1-pbinom(d, s, p[i])
p_reject <- 1 - p_accept
A <- function(phyper(d, 2000*p, 2000*(p[i]-p), s))
d <- 3
s <- 120
N <- 2000
p <- seq(0, 1, by=0.01)
for(i in 1:length(p)){
p_accept <- 1-pbinom(d, s, p[i])
p_reject <- 1 - p_accept
A <- function(number){phyper(d, 2000*p, 2000*(p[i]-p), s)}
AOQ <- p*A(N-s)/N
}
warnings()
DTMC_P
dtmcP
dtmcP[1,2]
P <- t(matrix(c( 0.7, 0.3, 0,
0, 0.6, 0.4,
0, 0, 1 ), nrow=3, ncol=3))
P
Q <- t(matrix(c( 0.7, 0.3,
0, 0.6,), nrow=2, ncol=2)) # omitting state 2 as it is a failure state
Q <- matrix(c( 0.7, 0.3,
0, 0.6,), nrow=2, ncol=2) # omitting state 2 as it is a failure state
Q <- matrix(c( 0.7, 0.3,
0, 0.6,) nrow=2, ncol=2) # omitting state 2 as it is a failure state
Q <- matrix(c( 0.7, 0.3,
0, 0.6) nrow=2, ncol=2) # omitting state 2 as it is a failure state
Q <- matrix(c( 0.7, 0.3,
0, 0.6), nrow=2, ncol=2) # omitting state 2 as it is a failure state
P <- t(matrix(c( 0.7, 0.3, 0,
0, 0.6, 0.4,
0, 0, 1 ), nrow=3, ncol=3))
P
Q <- matrix(c( 0.7, 0.3,
0, 0.6), nrow=2, ncol=2) # omitting state 2 as it is a failure state
Q
Q <- matrix(c( 0.7, 0.3, 0, 0.6), nrow=2, ncol=2) # omitting state 2 as it is a failure state
Q
P <- t(matrix(c( 0.7, 0.3, 0,
0, 0.6, 0.4,
0, 0, 1 ), nrow=3, ncol=3))
P
Q <- - matrix(c(0.7, 0.3, 0, 0.6), nrow = 2, byrow = TRUE) # omitting state 2 as it is a failure state
Q
P <- t(matrix(c( 0.7, 0.3, 0,
0, 0.6, 0.4,
0, 0, 1 ), nrow=3, ncol=3))
P
Q <- matrix(c(0.7, 0.3, 0, 0.6), nrow = 2, byrow = TRUE) # omitting state 2 as it is a failure state
Q
diag(2)
diag(nrow = 2)
diag
P <- t(matrix(c( 0.7, 0.3, 0,
0, 0.6, 0.4,
0, 0, 1 ), nrow=3, ncol=3))
P
Q <- matrix(c(0.7, 0.3, 0, 0.6), nrow = 2, byrow = TRUE) # omitting state 2 as it is a failure state
Q
identity_matrix <- matrix(c(1, 0, 0, 1), nrow = 2, byrow = TRUE)
identity_matrix
M_inv <- (identity_matrix - Q)
M <- inv(M_inv)
library(matlib)
solve(M_inv)
P <- t(matrix(c( 0.7, 0.3, 0,
0, 0.6, 0.4,
0, 0, 1 ), nrow=3, ncol=3))
P
Q <- matrix(c(0.7, 0.3, 0, 0.6), nrow = 2, byrow = TRUE) # omitting state 2 as it is a failure state
Q
identity_matrix <- matrix(c(1, 0, 0, 1), nrow = 2, byrow = TRUE)
identity_matrix
M_inv <- (identity_matrix - Q)
solve(M_inv)
10000*(3.33333) + 6000*(2.5)
library(Matrix)
library(pracma)
Q <- matrix(c(-7, 7, 0, 0,
10, -17, 7, 0,
0, 20, -27, 7,
0, 0, 30, -30), nrow = 4, byrow = TRUE)
Q <- as(Q, "dgeMatrix")
Q <- as(as(as(., "dMatrix"), "generalMatrix"), "unpackedMatrix")
Q <- as(as(as(Q, "dMatrix"), "generalMatrix"), "unpackedMatrix")
Q
B <- matrix(c(0, 0, 0, 1), nrow = 4)
P <- solve(t(Q) %*% Q, t(Q) %*% B)
print(P)
steady_state_probs <- P[1:3, 1]
L <- sum(1:3 * steady_state_probs)
print(L)
lambda <- 7
mu <- 10
L <- (lambda^2) / (mu * (mu - lambda))
L
I(3)
